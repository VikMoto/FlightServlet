plugins {
    id 'java'
    id 'war'
}

group 'flightservlet'

java {
    withSourcesJar()
}


apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jacoco'

// Define the output directory for compiled classes
tasks.named('compileJava') {
    options.setAnnotationProcessorPath(configurations.annotationProcessor)
    options.encoding = "UTF-8"
    destinationDirectory.set(file('out/artifacts/flight_servlet/WEB-INF/classes'))
}

processResources {
    println(DuplicatesStrategy.values())
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


task copyJsp(type: Copy) {
    from 'src/main/resources/tickets.jsp'
    into 'out/artifacts/flight_servlet'
}

task copyLibs(type: Copy) {
    from 'web'
    into 'out/artifacts/flight_servlet'
}

task copyResources(type: Copy) {
    from 'src/main/resources'
    into 'out/artifacts/flight_servlet/WEB-INF'
}

//
//task copyHtml(type: Copy) {
//    from 'web/index.html'
//    into 'out/artifacts/flight_servlet'
//}

repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // Use Jakarta Servlet API instead of Java Servlet API
    implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'

    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    implementation group: 'com.google.guava', name: 'guava', version: '30.1-jre'

    // Use the providedOnly configuration for Lombok as it is not needed at runtime
    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'



}

sourceSets {
    main {
        output.dir('out/artifacts/flight_servlet')
        resources {
            srcDirs = ['src/main/resources', 'resources', 'out/artifacts/flight_servlet/WEB-INF/resources']
        }
    }
}

jar {
    dependsOn('compileJava')
    manifest {
        if (!configurations.runtimeClasspath.isEmpty()) {
            attributes(
                    'Class-Path': configurations.runtimeClasspath.collect { it.toURI().toString() }.join(' '),
                    'Main-Class': 'flightservlet.servlets.Test')
        }
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    destinationDirectory.set(file('out/artifacts/flight_servlet/WEB-INF/lib'))
}

war.dependsOn compileJava


test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

war.dependsOn copyLibs
war.dependsOn copyResources